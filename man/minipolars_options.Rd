% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/options.R
\name{strictly_immutable}
\alias{strictly_immutable}
\alias{get_minipolars_options}
\alias{minipolars_options}
\alias{set_minipolars_options}
\alias{reset_minipolars_options}
\alias{get_minipolars_opt_requirements}
\title{minipolars options}
\usage{
get_minipolars_options()

set_minipolars_options(...)

reset_minipolars_options()

get_minipolars_opt_requirements()
}
\arguments{
\item{strictly_immutable}{bool, default = TRUE, keep minipolars strictly immutable.
Polars/arrow is in general pro "immutable objects". However pypolars API has some minor exceptions.
All settable property elements of classes are mutable.
Why?, I guess python just do not have strong stance on immutability.
R strongly suggests immutable objects, so why not make polars strictly immutable where little performance costs?
However, if to mimic pypolars as much as possible, set this to FALSE.}
}
\value{
current settings as list

current settings as list

list named by options of requirement function input must satisfy
}
\description{
get, set, reset minipolars options
}
\details{
modifing list takes no effect, pass it to set_minipolars_options
}
\examples{
 get_minipolars_options()
set_minipolars_options(strictly_immutable = FALSE)
get_minipolars_options()

reset_minipolars_options()
get_minipolars_options()
get_minipolars_opt_requirements()
}
