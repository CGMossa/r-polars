Notes:


# Pyexpr.apply():
input
  f: py function \(Series) -> Series (Series is pli.Series which is PySeries)
  d: datatype

does wrap f in wrap_f that calls Series.apply()


# Series.apply()
https://github.com/pola-rs/polars/blob/e80fccd6eb1e832aea0b36f9569de68960cb2eec/py-polars/polars/internals/series/series.py#L2976



# wrap_expr: wrap the bridge Pyexpr into higher level Expr
https://github.com/pola-rs/polars/blob/e80fccd6eb1e832aea0b36f9569de68960cb2eec/py-polars/polars/internals/expr/expr.py#L124


Expr.map()
PyExpr.map()
map_single()
    let function = move|s:Series| { |py| { call_lambda_with_seires}}
    call_lambda_with_series - takes py-token as input!
      build wrap series python-series call lambda on series
      in R take series and wrap in R-Series-Robj call lambda with this as input
    build "schema" map object
    call inner epxr(native rs - polars) .map with closure and schema-map as inputs
expr()

